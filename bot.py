import sqlite3
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–æ—Å–∞
(Q1, Q2, Q3, Q4, Q5, Q6, Q7, Q_DATES, Q_DATES_MORE, FINAL, QUESTION) = range(11)

# ID —á–∞—Ç–∞ –¥–ª—è –∑–∞—è–≤–æ–∫
ADMIN_CHAT_ID = -1002562481191

# –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π (–∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
CONSULT_PHONE = "+48 123 456 789"

# --- –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
def init_db():
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            city TEXT,
            tags TEXT,
            first_seen TEXT,
            last_seen TEXT
        )
    ''')
    conn.commit()
    conn.close()

def save_user(user, tags=""):
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute('''
        INSERT OR IGNORE INTO users (user_id, username, first_name, last_name, city, tags, first_seen, last_seen)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        user.id, user.username, user.first_name, user.last_name, "", tags,
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ))
    c.execute('''
        UPDATE users SET last_seen=?, tags=?
        WHERE user_id=?
    ''', (
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        tags,
        user.id
    ))
    conn.commit()
    conn.close()

def update_user_city(user_id, city):
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute('UPDATE users SET city=? WHERE user_id=?', (city, user_id))
    conn.commit()
    conn.close()

def update_user_tags(user_id, tags):
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute('UPDATE users SET tags=? WHERE user_id=?', (tags, user_id))
    conn.commit()
    conn.close()

# --- –û–ø—Ä–æ—Å–Ω–∏–∫ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    save_user(user)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å, –º–æ–∂–µ—à—å –ª–∏ —Ç—ã –ø–æ–¥–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç—É —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –ï–° –≤ –ü–æ–ª—å—à–µ. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º!\n\n"
        "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ç—ã –∂–∏–≤—ë—à—å –≤ –ü–æ–ª—å—à–µ?",
        reply_markup=ReplyKeyboardMarkup([["–ú–µ–Ω—å—à–µ 5 –ª–µ—Ç", "5 –ª–µ—Ç –∏ –±–æ–ª–µ–µ"]], one_time_keyboard=True, resize_keyboard=True)
    )
    context.user_data.clear()
    context.user_data["tags"] = []
    return Q1

async def q1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    user = update.effective_user
    if answer == "–ú–µ–Ω—å—à–µ 5 –ª–µ—Ç":
        context.user_data["tags"].append("early")
        save_user(user, ",".join(context.user_data["tags"]))
        await update.message.reply_text(
            "üòî –ü–æ–∫–∞ —Ä–∞–Ω–æ –ø–æ–¥–∞–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç—É —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞—Ä–∞–Ω–µ–µ ‚Äî –Ω–∞–ø–∏—à–∏ –º–Ω–µ!\n"
            f"–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏ –∏–ª–∏ –∑–≤–æ–Ω–∏: {CONSULT_PHONE} üìû",
            reply_markup=ReplyKeyboardRemove()
        )
        return FINAL
    else:
        context.user_data["tags"].append("ok_stay_years")
        await update.message.reply_text(
            "üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç —Ç—ã –±—ã–ª(-–∞) –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ü–æ–ª—å—à–∏?\n"
            "–ï—Å–ª–∏ –¥–∞ ‚Äî –≤–≤–µ–¥–∏ –ø–µ—Ä–∏–æ–¥—ã –≤—ã–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–¥–¥.–º–º.–≥–≥–≥–≥ - –¥–¥.–º–º.–≥–≥–≥–≥\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n01.01.2021 - 15.01.2021\n"
            "–ï—Å–ª–∏ –≤—ã–µ–∑–¥–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–π –ø–æ –æ–¥–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É –∑–∞ —Ä–∞–∑.\n"
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ'.\n"
            "–ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –≤—ã–µ–∑–¥–æ–≤ ‚Äî –Ω–∞–ø–∏—à–∏ '–ù–µ –±—ã–ª–æ'.",
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data["dates"] = []
        return Q_DATES

async def q_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.lower() == "–Ω–µ –±—ã–ª–æ":
        context.user_data["tags"].append("ok_stay")
        return await after_dates(update, context)
    elif text.lower() == "–≥–æ—Ç–æ–≤–æ":
        if not context.user_data.get("dates"):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ –±—ã–ª–æ'.")
            return Q_DATES
        return await after_dates(update, context)
    else:
        try:
            period = text.replace(" ", "").split("-")
            start = datetime.strptime(period[0], "%d.%m.%Y")
            end = datetime.strptime(period[1], "%d.%m.%Y")
            if end < start:
                await update.message.reply_text("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
                return Q_DATES
            context.user_data.setdefault("dates", []).append((start, end))
            await update.message.reply_text("–ü–µ—Ä–∏–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω! –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –≤—ã–µ–∑–¥—ã ‚Äî –≤–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π. –ï—Å–ª–∏ –≤—Å—ë ‚Äî –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ'.")
            return Q_DATES
        except Exception:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—ã —Ç–∞–∫: –¥–¥.–º–º.–≥–≥–≥–≥ - –¥–¥.–º–º.–≥–≥–≥–≥")
            return Q_DATES

async def after_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    periods = context.user_data.get("dates", [])
    total_days = 0
    max_trip = 0
    for start, end in periods:
        days = (end - start).days + 1
        total_days += days
        if days > max_trip:
            max_trip = days
    # –ö—Ä–∏—Ç–µ—Ä–∏–∏: –Ω–µ –±–æ–ª–µ–µ 304 –¥–Ω–µ–π –≤—Å–µ–≥–æ, –Ω–µ –±–æ–ª–µ–µ 183 –¥–Ω–µ–π –∑–∞ —Ä–∞–∑
    if total_days > 304 or max_trip > 183:
        context.user_data["tags"].append("fail_stay")
        save_user(update.effective_user, ",".join(context.user_data["tags"]))
        await update.message.reply_text(
            f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π –≤–Ω–µ –ü–æ–ª—å—à–∏ —Ç—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—à—å.\n"
            f"–í—Å–µ–≥–æ –¥–Ω–µ–π –≤–Ω–µ –ü–æ–ª—å—à–∏: {total_days}\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–¥–∏–Ω –≤—ã–µ–∑–¥: {max_trip} –¥–Ω–µ–π\n"
            f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏ –∏–ª–∏ –∑–≤–æ–Ω–∏: {CONSULT_PHONE} üìû"
        )
        return FINAL
    else:
        context.user_data["tags"].append("ok_stay")
        await update.message.reply_text(
            "üíº –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≥–æ–¥–∞ —É —Ç–µ–±—è –±—ã–ª —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ (—Ä–∞–±–æ—Ç–∞ –∏–ª–∏ –±–∏–∑–Ω–µ—Å)?",
            reply_markup=ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç", "–ë—ã–ª–∏ –ø–µ—Ä–µ—Ä—ã–≤—ã"]], one_time_keyboard=True, resize_keyboard=True)
        )
        return Q3

async def q3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    if answer == "–î–∞":
        context.user_data["tags"].append("ok_income")
        await update.message.reply_text(
            "üó£Ô∏è –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –ø–æ–ª—å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –Ω–µ –Ω–∏–∂–µ B1?",
            reply_markup=ReplyKeyboardMarkup([
                ["–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç B1 –∏–ª–∏ –≤—ã—à–µ"],
                ["–û–∫–æ–Ω—á–∏–ª –í–£–ó –≤ –ü–æ–ª—å—à–µ –Ω–∞ –ø–æ–ª—å—Å–∫–æ–º"],
                ["–û–∫–æ–Ω—á–∏–ª –¥—Ä—É–≥–æ–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≤ –ü–æ–ª—å—à–µ"],
                ["–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"]
            ], one_time_keyboard=True, resize_keyboard=True)
        )
        return Q4
    elif answer == "–ù–µ—Ç":
        context.user_data["tags"].append("fail_income")
        await update.message.reply_text(
            "–ö–∞–∫ –¥–æ–ª–≥–æ –Ω–µ –±—ã–ª–æ –¥–æ—Ö–æ–¥–∞?",
            reply_markup=ReplyKeyboardMarkup([
                ["–ù–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤"], ["–ü–æ–ª–≥–æ–¥–∞"], ["–ì–æ–¥"], ["–í–æ–æ–±—â–µ –Ω–µ –±—ã–ª–æ –¥–æ—Ö–æ–¥–∞"]
            ], one_time_keyboard=True, resize_keyboard=True)
        )
        return Q5
    else:  # –ë—ã–ª–∏ –ø–µ—Ä–µ—Ä—ã–≤—ã
        context.user_data["tags"].append("fail_income")
        await update.message.reply_text(
            "–ö–∞–∫ –¥–æ–ª–≥–æ –¥–ª–∏–ª–∏—Å—å –ø–µ—Ä–µ—Ä—ã–≤—ã?",
            reply_markup=ReplyKeyboardMarkup([
                ["–ù–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤"], ["–ü–æ–ª–≥–æ–¥–∞"], ["–ì–æ–¥"], ["–í–æ–æ–±—â–µ –Ω–µ –±—ã–ª–æ –¥–æ—Ö–æ–¥–∞"]
            ], one_time_keyboard=True, resize_keyboard=True)
        )
        return Q5

async def q5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    if answer == "–ù–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤":
        await update.message.reply_text(
            "üó£Ô∏è –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –ø–æ–ª—å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –Ω–µ –Ω–∏–∂–µ B1?",
            reply_markup=ReplyKeyboardMarkup([
                ["–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç B1 –∏–ª–∏ –≤—ã—à–µ"],
                ["–û–∫–æ–Ω—á–∏–ª –í–£–ó –≤ –ü–æ–ª—å—à–µ –Ω–∞ –ø–æ–ª—å—Å–∫–æ–º"],
                ["–û–∫–æ–Ω—á–∏–ª –¥—Ä—É–≥–æ–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≤ –ü–æ–ª—å—à–µ"],
                ["–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"]
            ], one_time_keyboard=True, resize_keyboard=True)
        )
        return Q4
    else:
        await update.message.reply_text(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö —Å –¥–æ—Ö–æ–¥–æ–º –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º.\n"
            f"–ü–∏—à–∏ –∏–ª–∏ –∑–≤–æ–Ω–∏: {CONSULT_PHONE} üìû"
        )
        return FINAL

async def q4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    if answer in [
        "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç B1 –∏–ª–∏ –≤—ã—à–µ",
        "–û–∫–æ–Ω—á–∏–ª –í–£–ó –≤ –ü–æ–ª—å—à–µ –Ω–∞ –ø–æ–ª—å—Å–∫–æ–º",
        "–û–∫–æ–Ω—á–∏–ª –¥—Ä—É–≥–æ–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≤ –ü–æ–ª—å—à–µ"
    ]:
        context.user_data["tags"].append("ok_language")
        await update.message.reply_text(
            "üè† –£ —Ç–µ–±—è –µ—Å—Ç—å –∂–∏–ª—å—ë –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –∞—Ä–µ–Ω–¥–∞?",
            reply_markup=ReplyKeyboardMarkup([
                ["–ñ–∏–ª—å—ë –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"], ["–ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è"], ["–ù–∏—á–µ–≥–æ –Ω–µ—Ç"]
            ], one_time_keyboard=True, resize_keyboard=True)
        )
        return Q6
    else:
        context.user_data["tags"].append("fail_language")
        await update.message.reply_text(
            "–ë—ã—Å—Ç—Ä–µ–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –≤—Å–µ–≥–æ –±—É–¥–µ—Ç —Å–¥–∞—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω. –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –≥–æ—Å—ç–∫–∑–∞–º–µ–Ω–∞: https://certyfikatpolski.pl/ üáµüá±",
            reply_markup=ReplyKeyboardRemove()
        )
        return FINAL

async def q6(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    if answer in ["–ñ–∏–ª—å—ë –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", "–ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è"]:
        context.user_data["tags"].append("ok_housing")
        await update.message.reply_text(
            "üõ°Ô∏è –£ —Ç–µ–±—è –µ—Å—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞?",
            reply_markup=ReplyKeyboardMarkup([
                ["–î–∞, —è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é"],
                ["–î–∞, —è –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å"],
                ["–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ó–£–° –∫ —á–ª–µ–Ω—É —Å–µ–º—å–∏"],
                ["–ï—Å—Ç—å —á–∞—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞"]
            ], one_time_keyboard=True, resize_keyboard=True)
        )
        return Q7
    else:
        context.user_data["tags"].append("fail_housing")
        await update.message.reply_text(
            "–í–∞–º –Ω—É–∂–Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –∞—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º.\n"
            f"–ü–∏—à–∏ –∏–ª–∏ –∑–≤–æ–Ω–∏: {CONSULT_PHONE} üìû"
        )
        return FINAL

async def q7(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üèôÔ∏è –ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞? –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
    )
    return FINAL

async def final(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    city = update.message.text if update.message else ""
    if city and not city.startswith("/"):
        update_user_city(user.id, city)
    tags = context.user_data.get("tags", [])
    save_user(user, ",".join(tags))
    if "early" in tags or "fail_stay" in tags or "fail_income" in tags or "fail_language" in tags or "fail_housing" in tags:
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏ –∏–ª–∏ –∑–≤–æ–Ω–∏: {CONSULT_PHONE} üìû"
        )
    else:
        await update.message.reply_text(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–∞–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞—Ä—Ç—É —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –ï–°.\n"
            f"–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Äî –ø–∏—à–∏ –∏–ª–∏ –∑–≤–æ–Ω–∏: {CONSULT_PHONE} üìû"
        )
    return ConversationHandler.END

# --- –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Ç ---
async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    save_user(user)
    # –ü–µ—Ä–µ—Å–ª–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
    msg = (
        f"‚ùì –í–æ–ø—Ä–æ—Å –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è!\n"
        f"–û—Ç: @{user.username or '-'} (ID: {user.id})\n"
        f"–ò–º—è: {user.first_name or ''} {user.last_name or ''}\n"
        f"–í–æ–ø—Ä–æ—Å: {text}"
    )
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–≥–æ –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏. ‚òéÔ∏è"
    )
    return ConversationHandler.END

# --- –ö–æ–º–∞–Ω–¥–∞ /help ---
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å, –º–æ–∂–µ—à—å –ª–∏ —Ç—ã –ø–æ–¥–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç—É —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –ï–° –≤ –ü–æ–ª—å—à–µ üáµüá±\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å.\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º!"
    )

def main():
    init_db()
    app = ApplicationBuilder().token("7950791928:AAFvhWZMlthDlOB2SExxzhiu0M2djDrHsME").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            Q1: [MessageHandler(filters.TEXT & ~filters.COMMAND, q1)],
            Q_DATES: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_dates)],
            Q3: [MessageHandler(filters.TEXT & ~filters.COMMAND, q3)],
            Q4: [MessageHandler(filters.TEXT & ~filters.COMMAND, q4)],
            Q5: [MessageHandler(filters.TEXT & ~filters.COMMAND, q5)],
            Q6: [MessageHandler(filters.TEXT & ~filters.COMMAND, q6)],
            Q7: [MessageHandler(filters.TEXT & ~filters.COMMAND, q7)],
            FINAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, final)],
        },
        fallbacks=[
            MessageHandler(filters.ALL, handle_question)
        ]
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler('help', help_command))
    app.run_polling()

if __name__ == '__main__':
    main()
